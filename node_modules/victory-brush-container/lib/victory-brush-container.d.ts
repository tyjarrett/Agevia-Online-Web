import React from "react";
import { DomainTuple, VictoryContainerProps, VictoryEventHandler } from "victory-core";
export interface VictoryBrushContainerProps extends VictoryContainerProps {
    allowDrag?: boolean;
    allowDraw?: boolean;
    allowResize?: boolean;
    brushComponent?: React.ReactElement;
    brushDimension?: "x" | "y";
    brushDomain?: {
        x?: DomainTuple;
        y?: DomainTuple;
    };
    brushStyle?: React.CSSProperties;
    defaultBrushArea?: "all" | "none" | "disable" | "move";
    disable?: boolean;
    handleComponent?: React.ReactElement;
    handleStyle?: React.CSSProperties;
    handleWidth?: number;
    onBrushCleared?: (domain: {
        x: DomainTuple;
        y: DomainTuple;
    }, props: VictoryBrushContainerProps) => void;
    onBrushDomainChange?: (domain: {
        x: DomainTuple;
        y: DomainTuple;
    }, props: VictoryBrushContainerProps) => void;
    onBrushDomainChangeEnd?: (domain: {
        x: DomainTuple;
        y: DomainTuple;
    }, props: VictoryBrushContainerProps) => void;
}
export declare const VICTORY_BRUSH_CONTAINER_DEFAULT_PROPS: {
    allowDrag: boolean;
    allowDraw: boolean;
    allowResize: boolean;
    brushComponent: JSX.Element;
    brushStyle: {
        stroke: string;
        fill: string;
        fillOpacity: number;
    };
    handleComponent: JSX.Element;
    handleStyle: {
        stroke: string;
        fill: string;
    };
    handleWidth: number;
    mouseMoveThreshold: number;
};
export declare const useVictoryBrushContainer: (initialProps: VictoryBrushContainerProps) => {
    props: {
        domain: {
            x: DomainTuple;
            y: DomainTuple;
        };
        currentDomain: {
            x: DomainTuple;
            y: DomainTuple;
        } | undefined;
        cachedBrushDomain: {
            x: DomainTuple;
            y: DomainTuple;
        } | undefined;
        allowDrag: boolean;
        allowDraw: boolean;
        allowResize: boolean;
        brushComponent: JSX.Element;
        brushDimension?: "x" | "y" | undefined;
        brushDomain?: {
            x?: DomainTuple | undefined;
            y?: DomainTuple | undefined;
        } | undefined;
        brushStyle: React.CSSProperties | {
            stroke: string;
            fill: string;
            fillOpacity: number;
        };
        defaultBrushArea?: "move" | "none" | "disable" | "all" | undefined;
        disable?: boolean | undefined;
        handleComponent: JSX.Element;
        handleStyle: React.CSSProperties | {
            stroke: string;
            fill: string;
        };
        handleWidth: number;
        onBrushCleared?: ((domain: {
            x: DomainTuple;
            y: DomainTuple;
        }, props: VictoryBrushContainerProps) => void) | undefined;
        onBrushDomainChange?: ((domain: {
            x: DomainTuple;
            y: DomainTuple;
        }, props: VictoryBrushContainerProps) => void) | undefined;
        onBrushDomainChangeEnd?: ((domain: {
            x: DomainTuple;
            y: DomainTuple;
        }, props: VictoryBrushContainerProps) => void) | undefined;
        "aria-describedby"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        children?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[] | undefined;
        className?: string | undefined;
        containerId?: string | number | undefined;
        containerRef?: React.Ref<HTMLElement> | undefined;
        desc?: string | undefined;
        events?: React.DOMAttributes<any> | undefined;
        height?: number | undefined;
        name?: string | undefined;
        origin?: import("victory-core").OriginType | undefined;
        polar?: boolean | undefined;
        portalComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        portalZIndex?: number | undefined;
        preserveAspectRatio?: string | undefined;
        responsive?: boolean | undefined;
        role?: string | undefined;
        scale?: {
            x?: import("victory-core").D3Scale<any> | undefined;
            y?: import("victory-core").D3Scale<any> | undefined;
        } | undefined;
        style?: React.CSSProperties | undefined;
        tabIndex?: number | undefined;
        theme?: import("victory-core").VictoryThemeDefinition | undefined;
        title?: string | undefined;
        width?: number | undefined;
        ouiaId?: string | number | undefined;
        ouiaSafe?: boolean | undefined;
        ouiaType?: string | undefined;
        mouseMoveThreshold: number;
    };
    children: React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
};
export declare const VictoryBrushContainer: {
    (initialProps: VictoryBrushContainerProps): JSX.Element;
    role: string;
    defaultEvents(initialProps: VictoryBrushContainerProps): {
        target: string;
        eventHandlers: {
            onMouseDown: VictoryEventHandler;
            onTouchStart: VictoryEventHandler;
            onGlobalMouseMove: VictoryEventHandler;
            onGlobalTouchMove: VictoryEventHandler;
            onGlobalMouseUp: VictoryEventHandler;
            onGlobalTouchEnd: VictoryEventHandler;
            onGlobalTouchCancel: VictoryEventHandler;
        };
    }[];
};
//# sourceMappingURL=victory-brush-container.d.ts.map
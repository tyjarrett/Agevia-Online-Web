import React from "react";
import { VictoryContainerProps, DomainTuple, VictoryEventHandler } from "victory-core";
export declare type ZoomDimensionType = "x" | "y";
export declare type ZoomDomain = {
    x: DomainTuple;
    y: DomainTuple;
};
export interface VictoryZoomContainerProps extends VictoryContainerProps {
    allowPan?: boolean;
    allowZoom?: boolean;
    clipContainerComponent?: React.ReactElement;
    disable?: boolean;
    downsample?: number | boolean;
    minimumZoom?: {
        x?: number;
        y?: number;
    };
    onZoomDomainChange?: (domain: ZoomDomain, props: VictoryZoomContainerProps) => void;
    zoomDimension?: ZoomDimensionType;
    zoomDomain?: Partial<ZoomDomain>;
    horizontal?: boolean;
}
export declare const VICTORY_ZOOM_CONTAINER_DEFAULT_PROPS: {
    clipContainerComponent: JSX.Element;
    allowPan: boolean;
    allowZoom: boolean;
    zoomActive: boolean;
};
export declare const useVictoryZoomContainer: (initialProps: VictoryZoomContainerProps) => {
    props: {
        domain: ZoomDomain;
        originalDomain: ZoomDomain;
        currentDomain: ZoomDomain;
        cachedZoomDomain: ZoomDomain;
        scale: any;
        polar: boolean;
        origin: {
            x: number;
            y: number;
        };
        allowPan: boolean;
        allowZoom: boolean;
        clipContainerComponent: JSX.Element;
        disable?: boolean | undefined;
        downsample?: number | boolean | undefined;
        minimumZoom?: {
            x?: number | undefined;
            y?: number | undefined;
        } | undefined;
        onZoomDomainChange?: ((domain: ZoomDomain, props: VictoryZoomContainerProps) => void) | undefined;
        zoomDimension?: ZoomDimensionType | undefined;
        zoomDomain?: Partial<ZoomDomain> | undefined;
        horizontal?: boolean | undefined;
        "aria-describedby"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        children?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[] | undefined;
        className?: string | undefined;
        containerId?: string | number | undefined;
        containerRef?: React.Ref<HTMLElement> | undefined;
        desc?: string | undefined;
        events?: React.DOMAttributes<any> | undefined;
        height?: number | undefined;
        name?: string | undefined;
        portalComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        portalZIndex?: number | undefined;
        preserveAspectRatio?: string | undefined;
        responsive?: boolean | undefined;
        role?: string | undefined;
        style?: React.CSSProperties | undefined;
        tabIndex?: number | undefined;
        theme?: import("victory-core").VictoryThemeDefinition | undefined;
        title?: string | undefined;
        width?: number | undefined;
        ouiaId?: string | number | undefined;
        ouiaSafe?: boolean | undefined;
        ouiaType?: string | undefined;
        zoomActive: boolean;
    };
    children: React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
};
export declare const VictoryZoomContainer: {
    (initialProps: VictoryZoomContainerProps): JSX.Element;
    role: string;
    defaultEvents(initialProps: VictoryZoomContainerProps): {
        target: string;
        eventHandlers: {
            onMouseDown: VictoryEventHandler;
            onTouchStart: VictoryEventHandler;
            onMouseUp: VictoryEventHandler;
            onTouchEnd: VictoryEventHandler;
            onMouseLeave: VictoryEventHandler;
            onTouchCancel: VictoryEventHandler;
            onMouseMove: VictoryEventHandler;
            onTouchMove: VictoryEventHandler;
            onWheel: VictoryEventHandler;
        };
    }[];
};
//# sourceMappingURL=victory-zoom-container.d.ts.map
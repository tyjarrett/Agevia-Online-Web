import React from "react";
import { VictoryContainerProps, CoordinatesPropType, VictoryLabelProps, ValueOrAccessor, VictoryEventHandler, DomainTuple, PaddingProps } from "victory-core";
export declare type CursorCoordinatesPropType = CoordinatesPropType | number;
export interface VictoryCursorContainerProps extends VictoryContainerProps {
    cursorComponent?: React.ReactElement;
    cursorDimension?: "x" | "y";
    cursorLabel?: ValueOrAccessor<VictoryLabelProps["text"]>;
    cursorLabelComponent?: React.ReactElement;
    cursorLabelOffset?: CursorCoordinatesPropType;
    defaultCursorValue?: CursorCoordinatesPropType;
    disable?: boolean;
    horizontal?: boolean;
    padding?: PaddingProps;
    onCursorChange?: (value: CursorCoordinatesPropType, props: VictoryCursorContainerProps) => void;
}
export declare const VICTORY_CURSOR_CONTAINER_DEFAULT_PROPS: {
    cursorLabelComponent: JSX.Element;
    cursorLabelOffset: {
        x: number;
        y: number;
    };
    cursorComponent: JSX.Element;
};
export declare const useVictoryCursorContainer: (initialProps: VictoryCursorContainerProps) => {
    props: {
        cursorValue: CoordinatesPropType | null;
        domain: {
            x: DomainTuple;
            y: DomainTuple;
        };
        cursorComponent: JSX.Element;
        cursorDimension?: "x" | "y" | undefined;
        cursorLabel?: ValueOrAccessor<VictoryLabelProps["text"]>;
        cursorLabelComponent: JSX.Element;
        cursorLabelOffset: CursorCoordinatesPropType;
        defaultCursorValue?: CursorCoordinatesPropType | undefined;
        disable?: boolean | undefined;
        horizontal?: boolean | undefined;
        padding?: PaddingProps | undefined;
        onCursorChange?: ((value: CursorCoordinatesPropType, props: VictoryCursorContainerProps) => void) | undefined;
        "aria-describedby"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        children?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactElement<any, string | React.JSXElementConstructor<any>>[] | undefined;
        className?: string | undefined;
        containerId?: string | number | undefined;
        containerRef?: React.Ref<HTMLElement> | undefined;
        desc?: string | undefined;
        events?: React.DOMAttributes<any> | undefined;
        height?: number | undefined;
        name?: string | undefined;
        origin?: import("victory-core").OriginType | undefined;
        polar?: boolean | undefined;
        portalComponent?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        portalZIndex?: number | undefined;
        preserveAspectRatio?: string | undefined;
        responsive?: boolean | undefined;
        role?: string | undefined;
        scale?: {
            x?: import("victory-core").D3Scale<any> | undefined;
            y?: import("victory-core").D3Scale<any> | undefined;
        } | undefined;
        style?: React.CSSProperties | undefined;
        tabIndex?: number | undefined;
        theme?: import("victory-core").VictoryThemeDefinition | undefined;
        title?: string | undefined;
        width?: number | undefined;
        ouiaId?: string | number | undefined;
        ouiaSafe?: boolean | undefined;
        ouiaType?: string | undefined;
    };
    children: React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
};
export declare const VictoryCursorContainer: {
    (initialProps: VictoryCursorContainerProps): JSX.Element;
    role: string;
    defaultEvents(initialProps: VictoryCursorContainerProps): {
        target: string;
        eventHandlers: {
            onMouseLeave: VictoryEventHandler;
            onMouseMove: VictoryEventHandler;
            onTouchMove: VictoryEventHandler;
        };
    }[];
};
//# sourceMappingURL=victory-cursor-container.d.ts.map